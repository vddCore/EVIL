#[test(5)]
fn selfness_in_table() {
  val t = {
    f: self::fn(a, b) -> self.result = a + b
  };

  val result = t::f(2, 3);
  ret t.result;
}

#[test(21.37)]
fn self_fn_ret() {
  val t = { 
    func: self::fn(a, b) {
      self.result = a + b;
      ret self.result;
    }
  };
  
  ret t::func(21, 0.37);
}

#[test]
fn self_fn_state() {
  val chair = {
    __quips: array() {
      "The chair is perfectly fine. It'd be a shame if someone decided to test it.",
      "You broke the universe. Congratulations.",
      "Situation in the middle-east now seems more stable than this chair.",
      "As if we needed more than 4 legs on a freaking chair."
    },
    leg_count: 4,
    
    is_broken: self::fn() -> self.leg_count != 4,
    get_status: self::fn() {
      if (self.leg_count == 4) -> self.__quips[0];
      elif (self.leg_count < 0) -> self.__quips[1];
      elif (self.leg_count < 4) -> self.__quips[2];
      elif (self.leg_count > 4) -> self.__quips[3];
    },
    break_leg: self::fn() -> self.leg_count--,
    add_leg: self::fn() -> self.leg_count++
  };
  
  rw val result = true;
  result &= chair.leg_count == 4;
  result &= chair::get_status() == chair.__quips[0];
  
  chair::add_leg();
  result &= chair.leg_count == 5;
  result &= chair::get_status() == chair.__quips[3];
  
  chair::break_leg();
  chair::break_leg();
  result &= chair.leg_count == 3;
  result &= chair::get_status() == chair.__quips[2];
  
  chair::break_leg();
  chair::break_leg();
  chair::break_leg();
  chair::break_leg();
  result &= chair.leg_count == -1;
  result &= chair::get_status() == chair.__quips[1];
  
  ret result;
}

#[test]
fn self_referencing_self() {
  val t = {
    set: self::fn(v) -> self.__value = v,
    get_self: self::fn() -> self,
    create_new: self::fn() -> {
      set: self::fn(v) {
        self.__value = v;
        ret self;
      }
    }
  };
  
  val t2 = t::get_self()::create_new();
  t2::set(21.37);
  
  ret t <==> t::get_self()
   && t2.__value == 21.37;
}

#[test]
fn self_builder() {
  val ThingBuilder = { new: self::fn(name) -> {
    __name: name,
    __class: Nil,
    __desc: Nil,
    __purpose: Nil,

    with_class: self::fn(obj_class) {
      self.__class = obj_class;
      ret self; 
    },
    
    with_description: self::fn(obj_desc) {
      self.__desc = obj_desc;
      ret self;
    },
    
    with_purpose: self::fn(obj_purpose) {
      self.__purpose = obj_purpose;
      ret self;
    },
    
    get_name: self::fn() -> self.__name,
    get_class: self::fn() -> self.__class,
    get_description: self::fn() -> self.__desc,
    get_purpose: self::fn() -> self.__purpose
  }};
  
  val chair = ThingBuilder::new("chair")
   :: with_class("furniture")
   :: with_description("It's a chair.")
   :: with_purpose("For sitting on.");
   
  ret chair is Table // Haha.
   && chair::get_name() == "chair"
   && chair::get_class() == "furniture"
   && chair::get_description() == "It's a chair."
   && chair::get_purpose() == "For sitting on.";
}