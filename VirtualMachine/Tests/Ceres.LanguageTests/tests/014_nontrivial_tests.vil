fn fib_recursive(rw n, a = 1, b = 1) -> (--n > 0) ? (fib_recursive(n, b, a + b)) : (a); 

fn fib_iterative(rw n) {
  rw val f0 = 0, f1 = 1, f2;
  
  while (--n > 0) {
    f2 = f0 + f1;
    f0 = f1;
    f1 = f2;
  }
  
  ret f2;
}

fn fact_tailrec(n, acc = 1) {
  if (n <= 0) ret acc;
  else ret fact_tailrec(n - 1, n * acc); 
}

fn bubble_sort_table(table) {
  rw val i, t, j = #table, s = true;
  
  while (s) {
    s = false;
    
    for (i = 1; i < j; i++) {
      if (table[i] < table[i - 1]) {
        t = table[i];
        table[i] = table[i - 1];
        table[i - 1] = t;
        s = true;
      }
    }
    
    j--;
  }
}

fn bubble_sort_array(arr) {
  rw val i, t, j = #arr, s = true;
  
  while (s) {
    s = false;
    
    for (i = 1; i < j; i++) {
      if (arr[i] < arr[i - 1]) {
        t = arr[i];
        arr[i] = arr[i - 1];
        arr[i - 1] = t;
        s = true;
      }
    }
    
    j--;
  }
}

#[test] 
fn fibonacci_recursive {
  val result = fib_recursive(40);
  assert.equal(result, 102334155);
}
#[test]
fn fibonacci_iterative {
  val result = fib_iterative(41);
  assert.equal(result, 165580141);
}

#[test]
fn tailrec_invoke {
  val result = fact_tailrec(10);
  assert.equal(result, 3628800);
}

#[test]
fn bubblesort_table {
  val a = { 4, 65, 2, -31, 0, 99, 2, 83, 782, 1 };
  
  // Tables are always passed by reference.
  bubble_sort_table(a);
  
  assert(a <==> { -31, 0, 1, 2, 2, 4, 65, 83, 99, 782 });
}

#[test]
fn bubblesort_array {
  val a = array { 4, 65, 2, -31, 0, 99, 2, 83, 782, 1 };
  
  // Arrays are always passed by reference.
  bubble_sort_array(a);
  
  assert(a <==> array { -31, 0, 1, 2, 2, 4, 65, 83, 99, 782 });
}
