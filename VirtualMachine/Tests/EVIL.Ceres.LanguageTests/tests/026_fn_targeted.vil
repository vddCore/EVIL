val TestClass = {};
val mt = {
  __invoke: fn(t, instance_name) {
    val Object = {};
    
    Object.__name = instance_name;
    
    loc fn Object::set_vars(a, b) {
      self.a = a;
      self.b = b;
    }
    
    loc fn Object::add(a, b) {
      self::set_vars(a, b);
      ret self.result = self.a + self.b;
    }
    
    loc fn Object::sub(a, b) {
      self::set_vars(a, b);
      ret self.result = self.a - self.b;
    }
    
    loc fn Object::mul(a, b) {
      self::set_vars(a, b);
      ret self.result = self.a * self.b;
    }
    
    loc fn Object::div(a, b) {
      self::set_vars(a, b);
      
      if (self.b == 0) {
        throw error("i could return a NaN here but fuck your input.");
      } else -> self.result = self.a / self.b;
    }
    
    ret Object;
  }
};
tbl.set_mt(TestClass, mt);

#[test]
fn targeted_fn_self_invocations {
  val instance = TestClass("instance_name_uwu");
  
  assert.equal(instance.__name, "instance_name_uwu");
  
  val add_result = instance::add(21, 37);
  assert.equal(instance.a, 21);
  assert.equal(instance.b, 37);
  assert.equal(instance.result, 58);
  assert.equal(instance.result, add_result);
  
  val sub_result = instance::sub(37, 21);
  assert.equal(instance.a, 37);
  assert.equal(instance.b, 21);
  assert.equal(instance.result, 16);
  assert.equal(instance.result, sub_result);
  
  val mul_result = instance::mul(21, 37);
  assert.equal(instance.a, 21);
  assert.equal(instance.b, 37);
  assert.equal(instance.result, 777);
  assert.equal(instance.result, mul_result);
  
  val div_result = instance::div(600, 50);
  assert.equal(instance.a, 600);
  assert.equal(instance.b, 50);
  assert.equal(instance.result, 12);
  assert.equal(instance.result, div_result);
  
  try {
    instance::div(20, 0);
  } catch (err) {
    assert.equal(
      err.msg,
      "i could return a NaN here but fuck your input."
    ); 
  }
}

#[test]
fn targeted_fn_in_local {
  val Object = {};
  
  loc fn Object::meow(x) {
    self.result = "meow! $x";
    ret x;
  }

  val result = Object::meow(2137);
  
  assert.equal(Object.result, "meow! 2137");
  assert.equal(result, 2137);
}

#[test]
fn targeted_fn_nested {
  val Object = {};
  
  loc fn Object::thing(x) {
    val Object = {};
    
    loc fn Object::jp2gmd() {
      self.uwu = x;
      ret self;
    }
    
    ret Object;
  }
  
  val inner_ref = Object::thing(222)::jp2gmd();
  assert.equal(inner_ref.uwu, 222);
}

#[test]
fn targeted_fn_conditional {
  val Object = {};
  
  if (false) {
    loc fn Object::say_hi(a1) -> "I should've never been executed, $a1!";
  } else {
    loc fn Object::say_hi(a1) -> "Hiiii $a1!";
  }
  
  val result = Object::say_hi("Aura");
  
  assert.equal(result, "Hiiii Aura!");
}

#[test]
fn targeted_fn_multiscope {
  {
    val Object = {};
  
    if (false) {
      loc fn Object::say_hi(a1) -> "I should've never been executed, $a1!";
    } else {
      loc fn Object::say_hi(a1) -> "Hiiii $a1!";
    }
  
    val result = Object::say_hi("Aura");
    assert.equal(result, "Hiiii Aura!");
  }
  
  {
    val Object = {};
    
    if (true) {
      loc fn Object::say_hi(a1) -> "Hiiii $a1!";
    } else {
      loc fn Object::say_hi(a1) -> "I should've never been executed, $a1!";
    }
  
    val result = Object::say_hi("Aura");
    assert.equal(result, "Hiiii Aura!");
  }
}

#[test]
fn targeted_fn_self {
  val Object = {};
  val mt = {
    __invoke: fn(t, a1) {
        t.a1 = a1;
        loc fn t::say_hi() -> "Hiii " + @t.a1 + "!";
        ret t;
    }
  };
 
  tbl.set_mt(Object, mt);

  val result = Object("Aura")::say_hi();
  assert.equal(result, "Hiii Aura!");
}

#[test]
fn targeted_fn_redefinition {
  val Object = {};
  
  loc fn Object::say_hi() -> "Hi!";
  assert.equal(Object::say_hi(), "Hi!");
  
  loc fn Object::say_hi() -> "Actually, hello!";
  assert.equal(Object::say_hi(), "Actually, hello!");
}

#[test]
fn targeted_fn_clone_behavior {
  val Base = {};
  
  loc fn Base::copy() {
    val Clone = {};
    Clone.msg = self.msg;
    loc fn Clone::speak() -> self.msg;
    ret Clone;
  }

  Base.msg = "you will be like me";
  val c1 = Base::copy();
  val c2 = Base::copy() with { msg: "nah, i'm my own thing" };

  assert.equal(c1::speak(), "you will be like me");
  assert.equal(c2::speak(), "nah, i'm my own thing");
}

#[test]
fn targeted_fn_dynamic_dispatch {
  val A = {};
  val B = {};

  loc fn A::exec() -> "A's turn";
  loc fn B::exec() -> "B steps in";

  rw val current = A;
  
  val first = current::exec();
  current = B;
  val second = current::exec();

  assert.equal(first, "A's turn");
  assert.equal(second, "B steps in");
}

#[test]
fn targeted_fn_reality_bleed {
  val Entity = {};

  loc fn Entity::inject_fracture() {
    self.phase = "prefracture";
    
    try {
      throw error("Reality fracture occurred.");
    } catch (err) {
      val t = {};

      self.phase = "fractured";
      self.err = err;

      loc fn t::whisper(x) -> "the void answers: " + x;

      val ghost_mt = {
        __get: self::fn(k) -> t[k]
      };
      
      tbl.set_mt(Entity, ghost_mt);
    }

    ret "fracture injected";
  }

  loc fn Entity::observe() {
    if (self.phase == "fractured") {
      ret self::whisper("you saw too much.");
    } else {
      ret "the fabric is intact.";
    }
  }

  val result1 = Entity::observe();
  assert.equal(result1, "the fabric is intact.");

  val result2 = Entity::inject_fracture();
  assert.equal(result2, "fracture injected");

  val result3 = Entity::observe();
  assert.equal(result3, "the void answers: you saw too much.");
}