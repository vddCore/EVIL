#[test]
fn each_basic_table() {
  val t = { x: 21.37, y: "haha funny number" };

  rw val tvar_1 = nil;
  rw val tvar_2 = nil;

  each (rw val key, value : t) {
    if (key == "x") {
      tvar_1 = t[key];
    } elif (key == "y") {
      tvar_2 = t[key];
    }
  }

  assert.equal(tvar_1, 21.37);
  assert.equal(tvar_2, "haha funny number");
}

#[test]
fn each_basic_table_skip() {
  val t = { x: 21.37, y: 11.11, z: 44.51 };

  rw val tvar_1 = nil;

  each (rw val key, value : t) {
    if (key != "z") {
      skip;
    }

    tvar_1 = t[key];
  }

  assert.equal(tvar_1, 44.51);
}

#[test]
fn each_basic_table_break() {
  val t = { x: 21.37, y: 11.11, z: 44.51 };

  rw val tvar_1 = nil;

  each (rw val key, value : t) {
    if (key == "y") {
      tvar_1 = t[key];
      break;
    }
  }

  assert.equal(tvar_1, 11.11);
}

#[test]
fn each_basic_table_ret() {
  val f = fn() {
    val t = { x: 21.37, y: 11.11, z: 44.51 };
    
    each (rw val key, value : t) {
      if (key == "y") {
        ret t[key];
      }
    }
  };
  
  val result = f();
  assert.equal(result, 11.11);
}

#[test]
fn each_kv_table() {
  val t = { x: "21.37", y: "haha funny number" };

  rw val tvar_k1 = nil;
  rw val tvar_v1 = nil;
  rw val tvar_k2 = nil;
  rw val tvar_v2 = nil;

  each (rw val key, value : t) {
    if (key == "x") {
      tvar_k1 = key;
      tvar_v1 = value;
    } elif (key == "y") {
      tvar_k2 = key;
      tvar_v2 = value;
    }
  }

  assert.equal(tvar_k1, "x");
  assert.equal(tvar_v1, "21.37");
  assert.equal(tvar_k2, "y");
  assert.equal(tvar_v2, "haha funny number");
}

#[test]
fn each_kv_table_skip() {
  val t = { x: "21.37", y: "haha funny number", z: "11111111" };

  rw val tvar_k = nil;
  rw val tvar_v = nil;

  each (rw val key, value : t) {
    if (key != "z") {
      skip;
    }
    
    tvar_k = key;
    tvar_v = value;
  }

  assert.equal(tvar_k, "z");
  assert.equal(tvar_v, "11111111");
}

#[test]
fn each_kv_table_break() {
  val t = { x: "21.37", y: "haha funny number", z: "11111111" };

  rw val tvar_k = nil;
  rw val tvar_v = nil;

  each (rw val key, value : t) {
    if (key == "y") {
      tvar_k = key;
      tvar_v = value;
      break;
    }
  }

  assert.equal(tvar_k, "y");
  assert.equal(tvar_v, "haha funny number");
}

#[test]
fn each_kv_table_ret() {
  val f = fn() {
    val t = { x: 21.37, y: 11.11, z: 44.51 };
    
    each (rw val key, value : t) {
      if (key == "y") {
        ret value;
      }
    }
  };
  
  val result = f();
  assert.equal(result, 11.11);
}

#[test]
fn each_val_only() {
  val t = { 10, 20, 30, 40 };
  
  each (rw val value : t) {
    assert(
      value == 10
      || value == 20
      || value == 30
      || value == 40
    );
  }
}