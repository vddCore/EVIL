fn test_invocation(f) 
  -> f();

fn generate_closure_with_parameter_value(x)
    -> (fn(a) -> a + x);

#[test]
fn basic_closure_parameter_hides_local {
  val a = 10;
  val f = fn(a) -> a;
  
  val result = f(12);
  assert.equal(result, 12);
}

#[test]
fn basic_closure_captures_local {
  val b = 10;
  val f = fn -> b + 2;
  
  val result = test_invocation(f);
  assert.equal(result, 12);
}

#[test]
fn basic_closure_captures_parameter {
  val f = generate_closure_with_parameter_value(10);
  val result = f(2);
  
  assert.equal(result, 12);
}

#[test]
fn nested_closure_captures_outside_local {
  val a = 21;
  val f = (fn -> (fn -> a + .37));
  
  val result = f()();
  
  assert.equal(result, 21.37);
}

#[test]
fn nested_closure_captures_closure_local {
  val a = 111;
  
  val f = fn {
      val a = 21;
      ret fn -> a + .37;
  };
  
  val result = f()();
  
  assert.equal(result, 21.37);
}

#[test]
fn nested_closure_captures_closure_parameter {
  val a = 111;
  val f = fn(a) {
    ret fn -> a + .37;
  };
  
  val result = f(21)();
  
  assert.equal(result, 21.37);
}

#[test]
fn extreme_closure_nesting {
  val a = 10;
  
  val result = test_invocation(fn(b) {
    val f = fn(c) {
      ret fn -> a + b + c;
    };
    ret f(2);
  }(9)) + .37;
    
  assert.equal(result, 21.37);
}


fn filter_table(t, predicate) {
    val result = { };
    
    each (rw val k, v : t) {
        if (predicate(k, v)) {    
            result[k] = v;
        }
    }
    
    ret result;
}

#[test]
fn predicate_anonymous_function {
    val t = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14 };
    val t2 = filter_table(
        t, 
        fn(k, v) -> v % 2 == 0
    ); 
    
    assert.equal(#t2, #t / 2); 
}

fn delay(ms) { 
  val end = time.stamp.ms + ms;
  while(time.stamp.ms < end){}
  
  ret 2.137;
}

fn spawn_yielding_closure {
  ret fn() {
    val start = time.stamp.ms;
    val retval = yield<delay>(500);
    
    ret { 
      stamp_result: time.stamp.ms,
      retval: retval
    };
  };
}

#[test]
fn yield_delay_from_closure {
  val f = spawn_yielding_closure();
  val r = yield<f>();
  
  
  assert.greater_than_or_equal(r.stamp_result, 1000);
  assert.equal(r.retval, 2.137);
}

fn spawn_closure_for_loop(a) {
  ret fn(b) -> a + b;
}

fn all(t, predicate) {
  rw val result = true;
  
  each (rw val k, v : t) {
    result &= predicate(k, v);
  }
  
  ret result;
}

#[test]
fn spawn_closures_in_loop {
  val results = { };
  for (rw val i = 0; i < 11; i++) {
    results[i] = spawn_closure_for_loop(i)(1);
  }
  
  assert(
    all(
      results, 
      fn(k,v) -> v == k + 1
    )
  );
}

#[test]
fn many_subchunks_capture_same_local_no_change {
  val local_a = 10;
  
  val f1 = fn(x) -> local_a + x;
  val f2 = fn(x) -> local_a * x;
  val f3 = fn(x) -> local_a - x;
  val f4 = fn(x) -> local_a / x;
  
  val result = f1(2) + f2(4) + f3(5) + f4(5);
  
  assert.equal(result, 59);
}

#[test]
fn many_subchunks_capture_same_local_after_change {
  rw val local_a = 11;
  val f1 = fn(x) -> local_a + x;
  
  local_a = 10;
  val f2 = fn(x) -> local_a * x;
  
  local_a = 9;
  val f3 = fn(x) -> local_a - x;
  
  local_a = 8;
  val f4 = fn(x) -> local_a / x;
  
  val result = f1(2) + f2(4) + f3(5) + f4(4);
  
  assert.equal(result, 47);
}

fn invoke_func_out_of_scope(f) -> f();

#[test]
fn after_invocation_var_return {
  val f = fn() -> 21.37;
  val res = f();
  val res2 = invoke_func_out_of_scope(f);
  
  assert.equal(res, res2);
}

fn make_counter {
  rw val counter = 0;
  
  ret fn() {
    counter++;
    ret counter;
  };
}

#[test]
fn internal_closure_state_is_preserved {
  val counter = make_counter();
  rw val result = 0;
  
  for (rw val i = 0; i < 10; i++) {
    result = counter();
  }
    
  assert.equal(result, 10);
}

#[test]
fn parameter_is_preserved {
  val start_at = fn (x) {
    ret fn(y) -> x + y;
  };
  
  val f1 = start_at(1);
  val f2 = start_at(5);
  val f3 = start_at(9);
  
  assert.equal(f1(3), 4);
  assert.equal(f2(3), 8);
  assert.equal(f3(3), 12);
}

#[test]
fn closures_in_each {
  val result_data = { };
  val test_data = { 1, 2, 3, 4, 5 };
  
  each (rw val k, v : test_data) {
    (fn(k, v) -> result_data[k] = v)(k, v);
  } 
  
  each (rw val k, v : result_data) {
    assert(k in test_data, @k + " was not found in test_data");
    assert.equal(v, test_data[k], @v + " was not equal to test_data[k] (" + @test_data[k] + ")");
  }
}

#[test]
fn modify_external_scope_closure {
  rw val result_a,
         result_b,
         result_c,
         result_d;
         
  val t = {
    Number => fn(a) -> result_a = a + 16,
    String => fn(b) -> result_b = "prepended " + b,
    Boolean => fn(c) -> result_c = !c,
    Type => fn(d) -> result_d = @d
  };
  
  val t2 = { 21, "test string", true, typeof(Type) };
  
  each (rw val _, v : t2) {
    t[typeof(v)](v);
  }
  
  assert.equal(result_a, 37);
  assert.equal(result_b, "prepended test string");
  assert.equal(result_c, false);
  assert.equal(result_d, "Type");
}

