fn jp2gmd(a, b, c) -> b + 0.37;

fn delay(ms) { 
  var end = time.stamp.ms + ms;
  while(time.stamp.ms < end){}
  
  ret 2.137;
}

fn dep_a() {
  if (glob_a--) {
    yield<delay>(10);
    yield<dep_b>();
  }
  
  ret 213.7;
}

fn dep_b() {
  if (glob_b--) {
    yield<delay>(10);
    yield<dep_a>(2000);
  }
  
  ret 0.2137;
}

fn ref_dep_b() -> dep_b;

#[test(21.37)]
fn yield_simple() {
  ret yield<jp2gmd>(1, 21, 3);
}

#[test]
fn yield_delay() {
  var start = time.stamp.ms;
  var retval = yield<delay>(1000);
  
  ret time.stamp.ms - start >= 1000 
   && retval == 2.137; 
}

#[test]
fn yield_interdependent() {
  glob_a = 3;
  glob_b = 3;
  var a = yield<dep_a>();
  
  glob_a = 3;
  glob_b = 3;
  var b = yield<dep_b>();
  
  ret a == 213.7 
   && b == 0.2137;
}

#[test(21.37)] fn yield_identifier() -> yield<jp2gmd>(1, 21, 3);
#[test(21.37)] fn yield_expression_identifier() -> yield<[jp2gmd]>(1, 21, 3);
#[test(0.2137)] fn yield_expression() -> yield<[ref_dep_b()]>();