#[test] fn arr_size() -> assert.equal(#array(10), 10);

#[test]
fn arr_set_val() {
  val arr = array(2);
  arr[0] = 10;
  arr[1] = 21.37;
  
  assert.is_of_type(arr, Array);
  assert.equal(#arr, 2);
  assert.is_true(10 in arr);
  assert.is_true(21.37 in arr);
  assert.equal(arr[0], 10);
  assert.equal(arr[1], 21.37);
}

#[test]
fn arr_init_val() {
  val arr = array { 21.37, 11.11 };
  
  assert.is_of_type(arr, Array);
  assert.equal(#arr, 2);
  assert.is_true(21.37 in arr);
  assert.is_true(11.11 in arr);
  assert.equal(arr[0], 21.37);
  assert.equal(arr[1], 11.11);
}

#[test]
fn arr_each() {
  val arr = array() { 2, 4, 6, 8, 10 };
  
  rw val prev_i = 0;
  rw val prev_v = arr[prev_i];
  
  each (rw val i, v : arr) {
    if (i == 0) skip;
    
    assert.equal(prev_i + 1, i);
    assert.equal(prev_v + 2, v);

    prev_i = i;
    prev_v = v;
  }
}

#[test]
fn arr_for() {
  val arr = array() { 4, 8, 12, 16 };

  for (rw val i = 0; i < #arr; i++) {
    assert.equal(arr[i], 4 * (i + 1));
  }
}

#[test]
fn func_in_arr() {
  val arr = array() { fn() -> 21.37 };
  
  assert.is_of_type(arr, Array);
  assert.equal(arr[0](), 21.37);  
}