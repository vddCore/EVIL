#[test]
fn assignment_var_direct() {
  rw val x = 20;
  
  assert.equal(x = 10, 10);
  assert.equal(x, 10);
}

#[test]
fn assignment_var_add() {
  rw val x = 10;
  
  assert.equal(x += 1, 11);
  assert.equal(x, 11);
}

#[test]
fn assignment_var_sub() {
  rw val x = 13;
  
  assert.equal(x -= 1, 12);
  assert.equal(x, 12);
}

#[test]
fn assignment_var_div() {
  rw val x = 26;
  
  assert.equal(x /= 2, 13);
  assert.equal(x, 13);
}

#[test]
fn assignment_var_mod() {
  rw val x = 30;
  
  assert.equal(x %= 16, 14);
  assert.equal(x, 14);
}

#[test]
fn assignment_var_mul() {
  rw val x = 7.5;
  
  assert.equal(x *= 2, 15);
  assert.equal(x, 15);
}

#[test]
fn assignment_var_band() {
  rw val x = 0xFFFF;
  
  assert.equal(x &= 0x0FF0, 0x0FF0);
  assert.equal(x, 0x0FF0);
}

#[test]
fn assignment_var_bor() {
  rw val x = 0xF000;
  
  assert.equal(x |= 0x0FF0, 0xFFF0);
  assert.equal(x, 0xFFF0);
}

#[test]
fn assignment_var_bxor() {
  rw val x = 0xF0F0;
  
  assert.equal(x ^= 0xFFFF, 0x0F0F);
  assert.equal(x, 0x0F0F);
}

#[test]
fn assignment_var_shl() {
  rw val x = 0xF;
  
  assert.equal(x <<= 16, 0xF0000);
  assert.equal(x, 0xF0000);
}

#[test]
fn assignment_var_shr() {
  rw val x = 0xFFFF;
  
  assert.equal(x >>= 8, 0x00FF);
  assert.equal(x, 0x00FF);
}

#[test]
fn chained_assignment_direct() {
  rw val a, b, c, d;
  val result = (a = b = c = d = 10);
  
  assert.equal(a, 10);
  assert.equal(b, 10);
  assert.equal(c, 10);
  assert.equal(d, 10);
  assert.equal(result, 10);
}

#[test]
fn chained_assignment_add() {
  rw val a = 5, b = 10, c = 15, d = 20;
  val result = (a += b += c += d += 5);
  
  assert.equal(a, 55);
  assert.equal(b, 50);
  assert.equal(c, 40);
  assert.equal(d, 25);
  assert.equal(result, 55);
}

#[test]
fn chained_assignment_sub() {
  rw val a = 5, b = 10, c = 15, d = 20;
  val result = (a -= b -= c -= d -= 5);
  
  assert.equal(a, -5);
  assert.equal(b, 10);
  assert.equal(c, 0);
  assert.equal(d, 15);
  assert.equal(result, -5);
}

#[test]
fn chained_assignment_div() {
  rw val a = 120, b = 60, c = 30, d = 10;
  val result = (a /= b /= c /= d /= 2); 
  
  assert.equal(a, 12);
  assert.equal(b, 10);
  assert.equal(c, 6);
  assert.equal(d, 5);
  assert.equal(result, 12);
}

#[test]
fn assignment_tbl_direct() {
  val a = {};
  a[0] = "test";
  
  assert.equal(#a, 1);
  assert.equal(a[0], "test");
}

#[test]
fn assignment_tbl_add() {
  val a = { 10 };
  
  assert.equal(a[0] += 1, 11);
  assert.equal(a[0], 11);
}


#[test]
fn assignment_tbl_sub() {
  val a = { 13 };
  
  assert.equal(a[0] -= 1, 12);
  assert.equal(a[0], 12);
}

#[test]
fn coalescing_assignment_global() {
  test_global = nil;
  test_global ??= 21.37;
  test_global ??= "a string";
  
  assert.equal(test_global, 21.37);
}

#[test]
fn coalescing_assignment_local() {
  rw val test_local = nil;
  test_local ??= 21.37;
  test_local ??= "a string";
  
  assert.equal(test_local, 21.37);
}

#[test]
fn coalescing_assignment_table_entry() {
  val t = { };
  t.x ??= 21;
  t.y ??= 37;
  
  t.x ??= 12;
  t.y ??= 34;
  
  assert.equal(t.x, 21);
  assert.equal(t.y, 37);
}

#[test]
fn chained_coalescing_assignment_table_entry_when_first_is_nil() {
  val t = { };
  val a = "";
  rw val b = nil;
  
  t.entry ??= b ??= a;
  
  assert.equal(b, a);
  assert.equal(t.entry, a); 
}

#[test]
fn chained_coalescing_assignment_table_entry_when_first_is_not_nil() {
  val t = { };
  rw val a = "string";
  rw val b = nil;
  rw val c = nil;
  
  t.entry ??= a ??= b ??= c;
  
  assert.equal(t.entry, a);
  assert.equal(b, nil);
  assert.equal(c, nil); 
}