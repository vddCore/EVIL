import("libs/arch.vil");

fn unary_test() {
  var a = -1;
  arch.expect_eq(a, -1);
  arch.expect_eq(@a, "-1");
  arch.expect_eq(@-2, "-2");
  
  var b = -a;
  arch.expect_eq(b, 1);
  arch.expect_eq(@-(-1), "1");
  
  var c = +1;
  arch.expect_eq(c, 1);
  arch.expect_eq(@+(+1), "1");
  arch.expect_eq(!false, 1);
  arch.expect_neq(true, false);
  
  var table_empty = {};
  arch.expect_eq(0, #table_empty);
  arch.expect_eq(3, #{ 1, 2, 3 });
  
  var table_single = { 1 };
  arch.expect_eq(1, #table_single);
  
  var not_zero = ~0;
  arch.expect_eq(-1, not_zero);
  
  var not_not_zero = ~~0;
  arch.expect_eq(not_not_zero, 0);
  
  var floor = $1.32;
  arch.expect_eq(1, floor);
  arch.expect_eq("2", @$2.44);
  arch.expect_eq("-4", @$-3.9);
  arch.expect_eq("unary_test", ?unary_test);
}

fn local_anon_fn_test() {
  var a = fn() {
    ret 2;
  };
  
  arch.expect_eq(2, a());
  arch.expect_eq("2", @a());
}

fn local_named_fn_test() {
  fn a() {
    ret 2137;
  }

  arch.expect_eq(2137, a());
  arch.expect_eq("2137", @a());
}

fn simple_table_test() {
  var t = {};
  t.x = {};

  arch.expect_true("x" in t);
  arch.expect_eq("Table(0)", @t.x);
}

fn if_test() {
  if (1 != 1) {
    arch.fail("1 != 1");
  }
  
  if (2 == 1) {
    arch.fail("2 == 1");
  }
  
  var testvar = "yay :D";
  if (testvar != "yay :D") {
    arch.fail("\"yay :D\" != \"yay :D\"");
  }
}

fn each_loop_mutation_test() {
  var t3 = { 1, 2, 3, 4, 5, 6 };

  each(var k, var v : t3) {
    undef t3[k + 1];
  }
  
  arch.expect_true(0 in t3);
  arch.expect_true(2 in t3);
  arch.expect_true(4 in t3);
  arch.expect_false(1 in t3);
  arch.expect_false(3 in t3);
  arch.expect_false(5 in t3);
}

var tests = {
  arch.test("UNARY OPERATOR", unary_test),
  arch.test("LOCAL ANONYMOUS FUNCTION", local_anon_fn_test),
  arch.test("LOCAL NAMED FUNCTION", local_named_fn_test),
  arch.test("SIMPLE TABLE", simple_table_test),
  arch.test("IF CONDITION", if_test),
  arch.test("EACH LOOP COLLECTION MUTATION", each_loop_mutation_test)
};

fn main(args) {
  each (var _, var test : tests) {
    arch.exec(test);
  }
}