fn jp2gmd(a, b, c) -> b + 0.37;

fn delay(ms) { 
  val end = time.stamp.ms + ms;
  while(time.stamp.ms < end){}
  
  ret 2.137;
}

fn dep_a() {
  if (glob_a--) {
    yield<delay>(10);
    yield<dep_b>();
  }
  
  ret 213.7;
}

fn dep_b() {
  if (glob_b--) {
    yield<delay>(10);
    yield<dep_a>(2000);
  }
  
  ret 0.2137;
}

fn ref_dep_b() -> dep_b;

#[test]
fn yield_simple() {
  val result = yield<jp2gmd>(1, 21, 3);
  assert.equal(result, 21.37);
}

#[test]
fn yield_delay() {
  val start = time.stamp.ms;
  val retval = yield<delay>(1000);
  
  assert.greater_than_or_equal(time.stamp.ms - start, 1000);
  assert.equal(retval, 2.137);
}

#[test]
fn yield_interdependent() {
  glob_a = 3;
  glob_b = 3;
  val a = yield<dep_a>();
  
  glob_a = 3;
  glob_b = 3;
  val b = yield<dep_b>();
  
  assert.equal(a, 213.7); 
  assert.equal(b, 0.2137);
}

#[test]
fn yield_identifier() -> assert.equal(
  yield<jp2gmd>(1, 21, 3),
  21.37
);

#[test]
fn yield_expression_identifier() -> assert.equal(
  yield<[jp2gmd]>(1, 21, 3),
  21.37
);

#[test]
fn yield_expression() -> assert.equal(
  yield<[ref_dep_b()]>(),
  0.2137
);