fn fib_recursive(rw n, a = 1, b = 1) -> (--n > 0) ? (fib_recursive(n, b, a + b)) : (a); 

fn fib_iterative(rw n) {
  rw var f0 = 0, f1 = 1, f2;
  
  while (--n > 0) {
    f2 = f0 + f1;
    f0 = f1;
    f1 = f2;
  }
  
  ret f2;
}

fn fact_tailrec(n, acc = 1) {
  if (n <= 0) ret acc;
  else ret fact_tailrec(n - 1, n * acc); 
}

fn bubble_sort(a) {
  rw var i, t, j = #a, s = true;
  
  while (s) {
    s = false;
    
    for (i = 1; i < j; i++) {
      if (a[i] < a[i - 1]) {
        t = a[i];
        a[i] = a[i - 1];
        a[i - 1] = t;
        s = true;
      }
    }
    
    j--;
  }
}

#[test(102334155)] fn fibonacci_recursive() -> fib_recursive(40);
#[test(165580141)] fn fibonacci_iterative() -> fib_iterative(41);
#[test(3628800)] fn tailrec_invoke() -> fact_tailrec(10);

#[test]
fn bubblesort_invoke() {
  var a = { 4, 65, 2, -31, 0, 99, 2, 83, 782, 1 };
  
  // Tables are always passed by reference.
  bubble_sort(a);
  
  ret a <==> { -31, 0, 1, 2, 2, 4, 65, 83, 99, 782 };
}
