#[test] fn arr_size -> assert.equal(#array(10), 10);

#[test]
fn array_set_val {
  val arr = array(2);
  arr[0] = 10;
  arr[1] = 21.37;
  
  assert.is_of_type(arr, Array);
  assert.equal(#arr, 2);
  assert(10 in arr);
  assert(21.37 in arr);
  assert.equal(arr[0], 10);
  assert.equal(arr[1], 21.37);
}

#[test]
fn arr_init_val {
  val arr = array { 21.37, 11.11 };
  
  assert.is_of_type(arr, Array);
  assert.equal(#arr, 2);
  assert(21.37 in arr);
  assert(11.11 in arr);
  assert.equal(arr[0], 21.37);
  assert.equal(arr[1], 11.11);
}

#[test]
fn array_each {
  val arr = array { 2, 4, 6, 8, 10 };
  
  rw val prev_i = 0;
  rw val prev_v = arr[prev_i];
  
  each (rw val i, v : arr) {
    if (i == 0) skip;
    
    assert.equal(prev_i + 1, i);
    assert.equal(prev_v + 2, v);

    prev_i = i;
    prev_v = v;
  }
}

#[test]
fn array_for {
  val arr = array { 4, 8, 12, 16 };

  for (rw val i = 0; i < #arr; i++) {
    assert.equal(arr[i], 4 * (i + 1));
  }
}

#[test]
fn func_in_array {
  val arr = array { fn -> 21.37 };
  
  assert.is_of_type(arr, Array);
  assert.equal(arr[0](), 21.37);  
}

#[test]
fn array_assignment_copies_ref {
  val arr = array { 1, 2, 3 };
  val aref = arr;
  
  arr[0] = 2;
  
  assert.equal(aref[0], 2);
}

#[test]
fn array_self_reference_does_not_crash {
  val arr = [nil];
  arr[0] = arr;

  assert.is_of_type(arr[0], Array);
  assert.equal(arr[0][0], arr);
}

#[test]
fn array_func_weird_mutation {
  val arr = array { 1, 2, 3 };

  val f = fn -> arr[1] = arr[1] + arr[arr[1]];

  f();
  assert.throws(fn -> f());
}

#[test]
fn array_null_deref {
  val arr = [nil];
  assert.throws(fn -> arr[0] + 1);
}

#[test]
fn array_invalid_index_type {
  val arr = [1, 2, 3];
  assert.throws(fn -> arr["catgirl"] = 69);
}