#[test]
fn if_condition_simple() {
  rw val result = 0;
  if (true) { result = 1; }
  
  assert.equal(result, 1);
}

#[test]
fn if_else() {
  rw val result = 0;
  
  if (false) { result = 1; }
  else { result = 2; }
  
  assert.equal(result, 2);
}

#[test] 
fn if_elif_else() {
  rw val result = 0;
  
  if (1 == 2) { result = 1; }
  elif (2 == 3) { result = 2; }
  else { result = 3; }
  
  assert.equal(result, 3);
}

#[test]
fn only_first_true_elif_is_executed() {
  rw val result;
  
  if (1 == 2) { result = 1; }
  elif (3 - 1 == 2) { result = 21.37; }
  elif (true) { result = 11.11; }
  elif (@true) { result = "something went terribly wrong"; }
  else { result = "better fix that parser, sis..."; }
  
  assert.equal(result, 21.37);
}

#[test]
fn if_elif_else_implicit_ret() {
  val test_fn = fn() {
    if (1 == 2) -> 1;
    elif (2 == 3) -> 2;
    else -> 3;
  };

  assert.equal(test_fn(), 3);
}

#[test] 
fn or_shortcircuit_complex_left_is_true() {
  rw val x = nil;
  
  if (x is Nil || x is String || x > 0 || x < 1 ) {
    x = 0;
  }
  
  assert.equal(x, 0);
}

#[test] 
fn or_shortcircuit_left_is_true() {
  rw val x = nil;
  
  if (x is Nil || x > 0) {
    x = 0;
  }
  
  assert.equal(x, 0);
}

#[test] 
fn or_shortcircuit_right_is_true() {
  rw val x = -1;
  
  if (x is Nil || x < 0) {
    x = 0;
  }
  
  assert.equal(x, 0);
}

#[test] 
fn or_shortcircuit_complex_right_is_true() {
  rw val x = -1;
  
  if (x is Nil || (x is String || x < 0)) {
    x = 0;
  }
  
  assert.equal(x, 0);
}

#[test] 
fn or_shortcircuit_complex_else_branch() {
  rw val x = -1;
  
  if (x is Nil || (x is String || x > 0)) {
    x = 0;
  } elif(false) {
    x = 3;
  } else {
    x = 5
  }
  
  assert.equal(x, 5);
}

