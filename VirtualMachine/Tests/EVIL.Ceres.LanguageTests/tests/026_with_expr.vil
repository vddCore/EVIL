#[test]
fn simple_table_expansion_by_varref {
  val t = { hello: "world" };
  val t2 = t with { new: "value!" };
  
  assert.is_of_type(t, Table);
  assert.equal(t.hello, "world");
  assert.equal(t.new, nil);
  
  assert.is_of_type(t2, Table);
  assert.equal(t2.hello, "world");
  assert.equal(t2.new, "value!");
}

#[test]
fn dual_table_expansion {
  val t = { a: 21.37 } with { b: "haha" };
  
  assert.is_of_type(t, Table);
  assert.approx_equal(t.a, 21.37);
  assert.equal(t.b, "haha");
}

#[test]
fn multiple_table_expansion {
  val t = { a: 11.11 } 
     with { b: "lmao" } 
     with { c: "i see absolutely no way in which this can be abused." }
     with { d: "nuh-uh" };
     
  assert.is_of_type(t, Table);
  assert.approx_equal(t.a, 11.11);
  assert.equal(t.b, "lmao");
  assert.equal(t.c, "i see absolutely no way in which this can be abused.");
  assert.equal(t.d, "nuh-uh");
}

#[test]
fn table_value_replacement {
  val t = { i_am: Table, some: "value, too" };
  val t2 = t with { i_am: "a string" };
  
  assert.is_of_type(t, Table);
  assert.equal(t.i_am, Table);
  assert.equal(t.some, "value, too");
  
  assert.is_of_type(t2, Table);
  assert.equal(t2.i_am, "a string");
  assert.equal(t2.some, "value, too");
}

#[test]
fn expansion_as_table_initializer {
  val t = { a: "1", b: "2" };
  val t2 = { t: t with { c: "3" } };
  
  assert.is_of_type(t2.t, Table);
  assert.equal(t2.t.a, "1");
  assert.equal(t2.t.b, "2");
  assert.equal(t2.t.c, "3");
}

fn produce_table(name) -> ({ name: name });

#[test]
fn expansion_from_ret_value {
  val t = produce_table("test.exe") with { type: "file" };
  
  assert.is_of_type(t, Table); 
  assert.equal(t.name, "test.exe");
  assert.equal(t.type, "file");
} 