fn delay(ms) { 
  val end = time.stamp.ms + ms;
  while(time.stamp.ms < end){}

  ret 2.137;
}

#[test]
fn yield_zombie {
  rw val outer_arg = nil;
  rw val zombified = false;

  loc fn dies_and_rises(rw arg) {
    rw val zombified_2 = false;
    
    loc fn dies_and_rises_2 {
      if (!zombified_2) {
        arg = 12;
        zombified_2 = true;
        yield<delay>(10);
        yield<dies_and_rises_2>();
        
        throw arg;
      }
    }

    if (!zombified) {
      zombified = true;
      yield<delay>(10);
      yield<dies_and_rises>();
      
      try {
        yield<dies_and_rises_2>();
      } catch (e) {
        outer_arg = e;
        io.println(e);
      }
    }

    ret "undead";
  }

  zombified = false;
  val result = yield<dies_and_rises>();
  assert.equal(outer_arg, 12);
  assert.equal(result, "undead");
}

#[test]
fn tonum_indexing {
  val data = { a: { b: { c: "1", d: "2", e: "3", f: "4" } } };
  val x = $data.a.b.c * $data.a.b.d;
  
  assert.equal(x, 2);
}

#[test]
fn type_as_string -> assert.equal(
  @typeof(nil), "Nil"
);

loc fn test_yield -> 2137;

#[test]
fn yield_unary -> assert.equal(
  @yield<test_yield>(), "2137"
);