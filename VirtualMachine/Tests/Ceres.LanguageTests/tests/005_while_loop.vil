#[test]
fn while_simple() {
  rw val a = 0;
  
  while (a != 10) {
    a++;
  }
  
  assert.equal(a, 10);
}

#[test]
fn while_break() {
  rw val a = 0;
  
  while (a != 10) {
    a++;
    
    if (a == 5) {
      break;
    }
  }

  assert.equal(a, 5);  
}

#[test]
fn while_skip() {
  rw val a = 10;
  
  while (a--) {
    if (a > 2) {
      skip;
    }

    break;
  }
  
  assert.equal(a, 2);
}

#[test] 
fn while_false() {
  rw val a = 0;
  
  while (false) {
    a = 10;
  }
  
  assert.equal(a, 0);
}

#[test]
fn while_nested() {
  rw val a = 10, b, c;
  
  while (a) {
    a--;
    b = 10;
    
    while (b) {
      b--;
      c = 10;
      while (c) {
        c--;
      }
    }
  }
  
  assert.equal(a, 0);
  assert.equal(b, 0);
  assert.equal(c, 0);
}