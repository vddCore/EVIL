#[test(4)]
fn add_int() { ret 2 + 2; }

#[test(2)]
fn sub_int() { ret 3 - 1; }

#[test(4)]
fn div_int() { ret 20 / 5; }

#[test(4)]
fn mod_int() { ret 9 % 5; }

#[test(80)]
fn mul() { ret 4 * 20; }

#[test(21.37)]
fn add_double() { ret 21 + 0.37; }

#[test(2.137)]
fn sub_double() { ret 3 - 0.863; }

#[test(213.7)]
fn div_double() { ret 1923.3 / 9; }

#[test(2.5); approximate]
fn mod_double() { ret 21 % 3.7; }

#[test(0.2137)]
fn mul_double() { ret 20 * 0.010685; }

#[test(0x0F00)]
fn band() { ret 0xFFFF & 0x0F00; }

#[test(0xFFF0)]
fn bor() { ret 0x00F0 | 0xF000 | 0x0F00; }

#[test(0x000F)]
fn bxor() { ret 0xFFFF ^ 0xFFF0; }

#[test(0xFFFF)]
fn bnot() { ret ~0 & 0xFFFF; }

#[test(16)]
fn shl() { ret 1 << 4; }

#[test(32)]
fn shr() { ret 0x80 >> 2; }

#[test]
fn exists_str() { ret "a" in "blah"; }

#[test(false)]
fn notexists_str() { ret "f" in "blah"; }

#[test; ignore("compiler behavior not implemented yet.")]
fn exists_tbl() { }

#[test]
fn eq() { ret 2 == 2; }

#[test]
fn ne() { ret 10 != 5; }

#[test]
fn gt() { ret 10 > 2; }

#[test]
fn lt() { ret 1 < 3; }

#[test]
fn gte() { ret 2 >= 2; }

#[test]
fn lte() { ret 4 <= 4; }

#[test(4)]
fn len_str() { ret #"test"; }

#[test; ignore("compiler behavior not implemented yet.")]
fn len_tbl() { }

#[test("4")]
fn tostr_num() { ret @4; }

#[test("asdfg")]
fn tostr_str() { ret @"asdfg"; }

#[test(2137)]
fn tonum_int() { ret $"2137"; }

#[test(21.37)]
fn tonum_double() { ret $"21.37"; }

#[test]
fn postinc() {
  var a = 10;
  ret (a++ == 10) && (a == 11);
}

#[test]
fn preinc() { 
  var a = 10;
  ret (++a == 11) && (a == 11);
}

#[test]
fn postdec() {
  var a = 10;
  ret (a-- == 10) && (a == 9);
}

#[test]
fn predec() {
  var a = 10;
  ret (--a == 9) && (a == 9);
}

#[test("String")]
fn type_str() {
  ret typeof("jp2gmd");
}

#[test("Number")]
fn type_number() {
  ret typeof(2137);
}

#[test("Boolean")]
fn type_boolean() {
  ret typeof(false);
}