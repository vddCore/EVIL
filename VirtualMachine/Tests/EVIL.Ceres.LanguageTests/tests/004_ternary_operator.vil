#[test] 
fn ternary_true_with_constant {
  val result = true 
    ? 21.37 
    : "something went terribly wrong";
  
  assert.equal(result, 21.37);
}

#[test]
fn ternary_false_with_constant {
  val result = false 
    ? "something went terribly wrong"
    : "jp2gmd";
    
  assert.equal(result, "jp2gmd");   
}

#[test]
fn ternary_true_with_variable {
  val x = 25;
  val result = x / 5 == 5 
    ? 213.7 
    : "something went terribly wrong";
    
  assert.equal(result, 213.7);
}

#[test]
fn ternary_false_with_variable {
  val x = 666;
  val result = x > 999 
    ? "something went terribly wrong" 
    : 2.137;
    
  assert.equal(result, 2.137);
}

#[test]
fn ternary_true_nested {
  val result = 21 < 37 
    ? "jp2gmd" 
      ? "jeszcze jak" 
      : "nie wiem" 
    : "something went terribly wrong";
    
  assert.equal(result, "jeszcze jak");
}

#[test]
fn ternary_false_nested() {
  val result = false 
    ? "ĉu vi parolas esperanton?" 
      ? "jes!" 
      : "ne..." 
    : "ho ve";
  
  assert.equal(result, "ho ve");
}

#[test]
fn ternary_true_branch_is_expression() {
  val result = true 
    ? 10 * 2 + 3.7 
    : "ĉu vi certas?";
  
  assert.equal(result, 23.7);
}

#[test]
fn ternary_false_branch_is_expression() {
  val result = false 
    ? "nenio gravas plu" 
    : 42 / 2 + 1.37;
  
  assert.equal(result, 22.37);
}

#[test]
fn ternary_condition_is_expression() {
  val a = 3;
  val b = 7;
  val result = (a + b) == 10 
    ? "matematiko estas bela" 
    : "ĉu vi malsukcesis?";
  
  assert.equal(result, "matematiko estas bela");
}

#[test]
fn ternary_nested_in_branch() {
  val result = true
    ? (false 
        ? "ne ĉi tio" 
        : "ĉi tio")
    : "nada";
  
  assert.equal(result, "ĉi tio");
}

#[test]
fn ternary_with_nil_branch() {
  val spooky = nil;
  val result = false 
    ? spooky 
    : "spectre jam foriris";
  
  assert.equal(result, "spectre jam foriris");
}

#[test]
fn ternary_all_branches_are_ternaries() {
  val result = true
    ? (false ? "fiasko" : "sukceso")
    : (true ? "paniko" : "trankvilo");
  
  assert.equal(result, "sukceso");
}