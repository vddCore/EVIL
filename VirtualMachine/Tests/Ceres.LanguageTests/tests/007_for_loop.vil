#[test]
fn for_simple() {
  rw val i;
  for (i = 0; i < 10; ++i) {}
  
  assert.equal(i, 10);
}

#[test]
fn for_simple_skip() {
  rw val i;
  
  for (i = 0; i < 10; i++) {
    skip;
  }
  
  assert.equal(i, 10);
}

#[test]
fn for_simple_break() {
  rw val i;
  
  for (i = 0; i < 10; i++) {
    if (i == 5)
      break;
  }
  
  assert.equal(i, 5);
}

#[test]
fn for_nested() {
  rw val i, j, k;
  
  for (i = 0; i < 10; i++) {
    for (j = 0; j < 10; j++) {
      for (k = 0; k < 10; k++) { }
    }
  }
  
  assert.equal(i, 10);
  assert.equal(j, 10);
  assert.equal(k, 10);
}

#[test]
fn for_nested_break() {
  rw val broken = false;
  rw val i;
  
  for (i = 10; i < 11; i++) {
    // todo implement discard pattern
    for (_=_; true; i--) {
      if (i == 6) {
        broken = true;
        break;
      }
    }
    
    if (broken) {
      break;
    }
  }
  
  assert.equal(i, 6);
}

#[test]
fn for_multiple_statements() {
  rw val i;
  rw val j;
  
  for (i = 0, j = 0; i < 10; i++, j += 2) { }
  
  assert.equal(i, 10);
  assert.equal(j, 20);
}