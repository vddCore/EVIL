#[test]
fn try_catch_ok() {
  rw val result;

  try {
    throw "hiii";
  } catch(e) {
    result = e; 
  }

  assert.equal(result, "hiii");
}

loc fn throwing_inner(value) {
  rw val some_thing = 2 + 3 * 12;
  throw value;
}

#[test]
fn try_invoked_throws() {
  rw val result;

  try {
    throwing_inner({ msg: "yaaaay" });
  } catch (e) {
    result = e;
  }

  assert.is_true(result is Table);
  assert.equal(result.msg, "yaaaay");
}

#[test]
fn nested_try_blocks_innermost() {
  rw val result;

  try {
    try {
      try { 
        throw "this should happen!"; 
      } catch (e) { result = e; }
    } catch (e) { result = "should never ever happen! $e"; }
  } catch (e) { result = "should never happen too. $e"; }

  assert.equal(result, "this should happen!");
}

#[test]
fn nested_try_blocks_rethrow() {
  rw val result;

  try { 
    try { 
      try { 
        throw "jp2gmd"; 
      } catch (e) { throw e; }
    } catch (e) { throw e; }
  } catch (e) { result = e; }

  assert.equal(result, "jp2gmd");
}

loc fn validate_type(value) {
  if (value !is String) {
    throw "Invalid type.";
  }
}

loc fn is_valid_type(value) {
  try { validate_type(value); ret true; }
  catch (e) { ret false; }
}

#[test]
fn try_invoked_ret_differs() {
  assert.equal(is_valid_type(123), false);
  assert.equal(is_valid_type("meow"), true);
}

#[test]
fn try_native_throws() {
  rw val result;

  try {
    __throw_test("hello world");
  } catch (e) {
    result = e;
  }

  assert.equal(result, "hello world");
}

#[test]
fn try_require() { 
  rw val result = "hiii";

  try { result = require("doesnt_exist"); }
  catch (e) { result = e.msg; }

  assert.is_true(#result > 70);
}

loc fn throwing_by(value) -> by typeof(value) {
  Nil -> "It's a Nil!",
  Number -> "It's a Number!",
  Boolean -> "It's a Boolean!",
  String -> "It's a String!",
  Table -> "It's a Table!",
  Array -> "It's an Array!",
  Function -> "It's a Function!",
  NativeFunction -> "It's a NativeFunction!",
  NativeObject -> "It's a NativeObject!",
  Type -> throw "It's a Type and it's not supported!",
  else: throw "I don't know what the fuck that is!"
};

#[test]
fn try_by() {
  rw val result;
  
  try {
    throwing_by(NativeObject);
    result = throwing_by(nil);
  } catch (e) {
    result = e;
  }
  
  assert.equal(result, "It's a Type and it's not supported!");
}

#[test]
fn try_error() {
  rw val result;
  
  try {
    throw error {
      msg: "yeah that's an error!"
    };
  } catch (err) {
    assert.is_true(err is Error);
    result = err.msg;
  }
  
  assert.equal(result, "yeah that's an error!");
}