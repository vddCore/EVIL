#[test]
fn valref_qualifier_basic_with_else_branch() {
  val value = 123;
  
  val result = by value {
    222 -> 1234,
    123 -> "hhhhh",
    456 -> (2 + 1 + 3 + 7),
    else: "meow"
  };

  assert.equal(result, "hhhhh");
}

#[test]
fn valref_qualifier_basic_without_else_branch() {
  val value = 666;
  
  val result = by value {
    222 -> 1234,
    123 -> "hhhhh",
    456 -> (2 + 1 + 3 + 7)
  };

  assert.equal(result, nil);
}

#[test]
fn valref_qualifier_as_part_of_expression() {
  val value = 456;
  
  val result = by value {
    222 -> 1234,
    123 -> "hhhhh",
    456 -> (2 + 1 + 3 + 7),
    else: 0
  } + 200;

  assert.equal(result, 213);
}

#[test]
fn simple_expr_qualifier_basic_with_else_branch() {
  val result = by (400 + 56) {
    222 -> 1234,
    123 -> "hhhhh",
    456 -> (2 + 1 + 3 + 7),
    else: 0
  };

  assert.equal(result, 13);
}

#[test]
fn complex_expr_qualifier_as_part_of_expression() {
  loc fn test(a, b = 15) -> a + b;
  val table = { 10, 20, 30 };
  
  val result = by test(10) + table[1] {
    222 -> 1234,
    45 -> "hhhhh",
    456 -> (2 + 1 + 3 + 7),
    else: 0
  } + @213;

  assert.equal(result, "hhhhh213");
}

#[test]
fn qualifier_is_table() {
  val position = { x: 21, y: 37 };
  
  val result = by position {
    { x: 11, y: 13 } => "nope",
    { x: 21, y: 37 } -> "not deep enough",
    { x: 21, y: 37 } => "jp2gmd",
    { x: 11, y: 37 } => "wrong",
    else: "are you even trying"
  };
  
  assert.equal(result, "jp2gmd");
}

#[test]
fn qualifier_is_type() {
  loc fn get_type_msg(v) -> by typeof(v) {
    Nil -> "It's a Nil!",
    Number -> "It's a Number!",
    Boolean -> "It's a Boolean!",
    String -> "It's a String!",
    Table -> "It's a Table!",
    Array -> "It's an Array!",
    Function -> "It's a Function!",
    NativeFunction -> "It's a NativeFunction!",
    NativeObject -> "It's a NativeObject!",
    Type -> "It's a Type!",
    else: "I don't know what the fuck that is!"
  };
  
  val v1 = "string";
  val v2 = 1111;
  val v3 = Nil;
  val v4 = true;
  
  assert.equal(get_type_msg(v1), "It's a String!");
  assert.equal(get_type_msg(v2), "It's a Number!");
  assert.equal(get_type_msg(v3), "It's a Type!");
  assert.equal(get_type_msg(v4), "It's a Boolean!");
}