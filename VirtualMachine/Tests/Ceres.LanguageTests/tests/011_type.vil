fn testchunk() { }

#[test] fn type_nil() -> assert.equal(typeof(nil), Nil);
#[test] fn type_number() -> assert.equal(typeof(2137), Number);
#[test] fn type_boolean() -> assert.equal(typeof(false), Boolean);
#[test] fn type_str() -> assert.equal(typeof("jp2gmd"), String);
#[test] fn type_table() -> assert.equal(typeof({}), Table);
#[test] fn type_array() -> assert.equal(typeof(array(10)), Array);
#[test] fn type_chunk() -> assert.equal(typeof(testchunk), Function);
#[test] fn type_type() -> assert.equal(typeof(typeof(0)), Type);
#[test] fn type_nativefunction() -> assert.equal(typeof(__native_func), NativeFunction);
#[test] fn type_nativeobject() -> assert.equal(typeof(__native_object), NativeObject);

#[test]
fn value_is_nil() {
  val testval = nil;
  
  assert.is_true(testval is Nil);
  assert.equal(testval, nil);
}

#[test]
fn value_is_number() {
  val testval = 2137;
  
  assert.is_true(testval is Number);
  assert.equal(testval, 2137);
}

#[test]
fn value_is_boolean() {
  val testval = false;
  
  assert.is_true(testval is Boolean);
  assert.equal(testval, false);
}

#[test]
fn value_is_string() {
  val testval = "2137";
  
  assert.is_true(testval is String);
  assert.equal(testval, "2137");
}

#[test]
fn value_is_table() {
  val testval = { 1, 2, 3 };
  assert.is_true(testval is Table);
}

#[test]
fn values_in_table_are_matching_types() {
  val testval = {
    "a" => 123,
    10 => "111"
  };
  
  assert.is_true(testval is Table);
  assert.is_true(testval.a is Number);
  assert.is_true(testval[10] is String);
}

#[test]
fn value_is_chunk() {
  val testval = fn(a, b) -> a + b;
  assert.is_true(testval is Function);
}

#[test]
fn value_is_native_func() {
  val testval = __native_func;
  assert.is_true(testval is NativeFunction);
}

#[test]
fn value_is_native_object() {
  val testval = __native_object;
  assert.is_true(testval is NativeObject);
}

#[test]
fn value_is_not_number() {
  val testval = "string lol";
  assert.is_true(testval !is Number);
}

#[test]
fn value_is_not_string() {
  val testval = 21.37;
  assert.is_true(testval !is String);
}