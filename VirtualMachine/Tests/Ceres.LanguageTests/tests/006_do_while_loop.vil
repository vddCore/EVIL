#[test]
fn do_while_simple() {
  rw val a = 0;
  
  do {
    a++;
  } while(a != 10);
  
  assert.equal(a, 10);
}

#[test]
fn do_while_executes_at_least_once() {
  rw val a = 0;
  
  do {
    a++;
  } while(false);
  
  assert.equal(a, 1);
}

#[test]
fn do_while_break() {
  rw val a = 10;
  
  do {
    if (a <= 5) {
      break;
    }
    
    a--;
  } while(true);
  
  assert.equal(a, 5);
}

#[test]
fn do_while_skip() {
  rw val a = 10;
  
  do {
    if (a > 5) {
      a--;
      skip;
    }
    break;
  } while(true);
  
  assert.equal(a, 5);
}

#[test]
fn do_while_nested() {
  rw val a = 10, b, c;
  
  do {
    a--;
    b = 10;
    do {
      b--;
      c = 10;
      do {
        c--;
      } while(c);
    } while(b);
  } while(a);
  
  assert.equal(a, 0);
  assert.equal(b, 0);
  assert.equal(c, 0);
}