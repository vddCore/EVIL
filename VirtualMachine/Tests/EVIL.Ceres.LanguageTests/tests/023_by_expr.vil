#[test]
fn valref_qualifier_basic_with_else_branch {
  val value = 123;
  
  val result = by value {
    222 -> 1234,
    123 -> "hhhhh",
    456 -> (2 + 1 + 3 + 7),
    else: "meow"
  };

  assert.equal(result, "hhhhh");
}

#[test]
fn valref_qualifier_basic_without_else_branch {
  val value = 666;
  
  val result = by value {
    222 -> 1234,
    123 -> "hhhhh",
    456 -> (2 + 1 + 3 + 7)
  };

  assert.equal(result, nil);
}

#[test]
fn valref_qualifier_as_part_of_expression {
  val value = 456;
  
  val result = by value {
    222 -> 1234,
    123 -> "hhhhh",
    456 -> (2 + 1 + 3 + 7),
    else: 0
  } + 200;

  assert.equal(result, 213);
}

#[test]
fn simple_expr_qualifier_basic_with_else_branch {
  val result = by (400 + 56) {
    222 -> 1234,
    123 -> "hhhhh",
    456 -> (2 + 1 + 3 + 7),
    else: 0
  };

  assert.equal(result, 13);
}

#[test]
fn complex_expr_qualifier_as_part_of_expression {
  loc fn test(a, b = 15) -> a + b;
  val table = { 10, 20, 30 };
  
  val result = by test(10) + table[1] {
    222 -> 1234,
    45 -> "hhhhh",
    456 -> (2 + 1 + 3 + 7),
    else: 0
  } + @213;

  assert.equal(result, "hhhhh213");
}

#[test]
fn qualifier_is_table {
  val position = { x: 21, y: 37 };
  
  val result = by position {
    { x: 11, y: 13 } => "nope",
    { x: 21, y: 37 } -> "not deep enough",
    { x: 21, y: 37 } => "jp2gmd",
    { x: 11, y: 37 } => "wrong",
    else: "are you even trying"
  };
  
  assert.equal(result, "jp2gmd");
}

#[test]
fn qualifier_is_type {
  loc fn get_type_msg(v) -> by typeof(v) {
    Nil -> "It's a Nil!",
    Number -> "It's a Number!",
    Boolean -> "It's a Boolean!",
    String -> "It's a String!",
    Table -> "It's a Table!",
    Array -> "It's an Array!",
    Function -> "It's a Function!",
    NativeFunction -> "It's a NativeFunction!",
    NativeObject -> "It's a NativeObject!",
    Type -> "It's a Type!",
    else: "I don't know what the fuck that is!"
  };
  
  val v1 = "string";
  val v2 = 1111;
  val v3 = Nil;
  val v4 = true;
  
  assert.equal(get_type_msg(v1), "It's a String!");
  assert.equal(get_type_msg(v2), "It's a Number!");
  assert.equal(get_type_msg(v3), "It's a Type!");
  assert.equal(get_type_msg(v4), "It's a Boolean!");
}

#[test]
fn by_expression_with_duplicate_keys_and_early_match {
  val input = 42;

  val result = by input {
    42 -> "first match",
    42 -> "should never reach this",
    else: "no match"
  };

  assert.equal(result, "first match");
}

#[test]
fn by_expression_falls_to_else_when_all_fail {
  val input = "esperanto";

  val result = by input {
    "polski" -> "hej",
    "suomi" -> "moi",
    "eesti" -> "tere",
    else: "saluton"
  };

  assert.equal(result, "saluton");
}

#[test]
fn by_expression_value_is_nested_expression {
  val a = 10;
  val b = 15;

  val result = by (a * 2 + b) {
    35 -> "win",
    36 -> "close but no",
    else: "nope"
  };

  assert.equal(result, "win");
}

#[test]
fn by_expression_with_boolean_qualifier {
  val is_spicy = true;

  val result = by is_spicy {
    true -> "🔥",
    false -> "🌶️",
    else: "🥱"
  };

  assert.equal(result, "🔥");
}

#[test]
fn by_expression_matching_on_array_content {
  val arr = [ 1, 2, 3 ];

  val result = by arr {
    [ 1, 2, 3 ] => "perfect trio",
    [ 3, 2, 1 ] => "chaotic trio",
    else: "meh"
  };

  assert.equal(result, "perfect trio");
}

#[test]
fn by_expression_returning_function_call_result {
  loc fn shout(s) -> s + "!!!";

  val input = "ping";

  val result = by input {
    "pong" -> "echo",
    "ping" -> shout("pong"),
    else: "???"
  };

  assert.equal(result, "pong!!!");
}

#[test]
fn by_expression_deep_table_match_and_expr_result {
  val obj = { meta: { id: 1337 } };

  val result = by obj.meta.id {
    1337 -> "leet",
    404 -> "not found",
    else: "basic"
  };

  assert.equal(result, "leet");
}

#[test]
fn by_expression_type_mixup_should_fall_to_else {
  val input = "1337";

  val result = by input {
    1337 -> "number match",
    else: "wrong type"
  };

  assert.equal(result, "wrong type");
}

#[test]
fn by_expression_with_fn_call_as_case_value {
  loc fn get_val -> 21 + 37;

  val input = 58;

  val result = by input {
    get_val() -> "match via function",
    else: "nope"
  };

  assert.equal(result, "match via function");
}

#[test]
fn by_expression_with_nested_by_inside_case_expr {
  val value = 666;

  val result = by value {
    666 -> by true {
      true -> "nested match",
      else: "no nested luck"
    },
    else: "outer nope"
  };

  assert.equal(result, "nested match");
}

#[test]
fn by_expression_case_returns_nil_explicitly {
  val value = "vanish";

  val result = by value {
    "vanish" -> nil,
    else: "visible"
  };

  assert.equal(result, nil);
}

#[test]
fn by_expression_case_expr_has_side_effects {
  val side_effect = array { 0 };
  loc fn cause_side_effect { 
    side_effect[0] = 1;
    ret 123;
  }

  val result = by cause_side_effect() {
    123 -> "yep",
    else: "nope"
  };

  assert.equal(result, "yep");
  assert.equal(side_effect[0], 1);
}

#[test]
fn by_expression_qualifier_is_function_result {
  loc fn complex -> { x: 1, y: 2 };

  val result = by complex() {
    { x: 1, y: 2 } => "match",
    else: "nope"
  };

  assert.equal(result, "match");
}