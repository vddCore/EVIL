#[test] 
fn nil_is_nil {
  assert.is_of_type(nil, Nil);
  assert.equal(nil, nil);
}

#[test] 
fn number_is_number {
  assert.is_of_type(21.37, Number);
  assert.equal(21.37, 21.37);
}

#[test] 
fn string_is_string {
  assert.is_of_type("jp2gmd", String);
  assert.equal("jp2gmd", "jp2gmd");
}

#[test]
fn false_is_false {
  assert.is_of_type(false, Boolean);
  assert.equal(false, false);
}

#[test]
fn true_is_true {
  assert.is_of_type(true, Boolean);
  assert.equal(true, true);
}

#[test]
fn nan_is_in_fact_a_number {
  assert.is_of_type(NaN, Number);
}

#[test]
fn infinity_is_a_number_too {
  assert.is_of_type(Infinity, Number);
}

#[test] 
fn can_invert_infinity {
  assert.not_equal(Infinity, -Infinity);
}

#[test]
fn interpolated_string_locals_only_before_and_after_present {
  val a = 21.37;
  val b = "12345";
  
  assert.equal(
    "nyaa  ($a), $b, uwu", 
    'nyaa  (21.37), 12345, uwu'
  ); 
}

#[test]
fn interpolated_string_locals_only_after_present {
  val a = 21.37;
  val b = "12345";
  
  assert.equal(
    "$a, $b, uwu", 
    '21.37, 12345, uwu'
  ); 
}

#[test]
fn interpolated_string_locals_only {
  val a = 21.37;
  val b = "12345";
  
  assert.equal(
    "$a, $b", 
    '21.37, 12345'
  ); 
}

#[test]
fn interpolated_string_locals_and_globals {
  val a = 21.37;
  val b = "12345";
  jp2 = "gmd";
  
  assert.equal(
    "$a, $b, $jp2", 
    '21.37, 12345, gmd'
  ); 
}

#[test]
fn interpolated_string_symbol_prompt_only {
  val b = "12345";
  
  assert.equal(
    "$, $b", 
    '$, 12345'
  ); 
}

#[test]
fn number_with_exponent {
  val a = 1e+3;
  val b = 2E2;
  val c = 3E-2;
  
  assert.equal(a, 1000);
  assert.equal(b, 200);
  assert.equal(c, 0.03);
}