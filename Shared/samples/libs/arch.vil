var arch;

fn register_arch() {
  fn create_detailed_message(condition, expected, actual) {
    ret @condition 
        + " not satisfied - expected " 
        + @expected 
        + "(" + type(expected) + "); " 
        + "got: " 
        + @actual 
        + "(" 
        + @type(actual) 
        + ")"
        ;
  }
  
  fn create_simple_message(condition, expr) {
    ret @condition 
        + " not satisfied - got " 
        + @expr 
        ;
  }
  
  fn print_stack() {
    var trace = strace();
    
    if (!trace) { ret; }
    
    undef trace[0];
    undef trace[1];
    undef trace[2];
    
    each (var _, var frm : trace) {
      io.println(
        " at " + @frm.fn_name + "\n" +
        "   <def ln: " + @frm.def_at + ">\n" + 
        "   <inv ln: " + @frm.inv_at + ">"
      );
    }
  }
  
  fn terminate() {
    print_stack();
    exit;
  }
  
  var arch_def = {
    "assert" = fn(condition, message) {
      if (!condition) {
        io.println("assertion failed: " + message);
        terminate();
      }
    },
    
    "expect_eq" = fn(expected, actual, message) {
      arch.assert(expected == actual, message || create_detailed_message("EQ", expected, actual));
    },
    
    "expect_neq" = fn(expected, actual, message) {
      arch.assert(expected != actual, message || create_detailed_message("NEQ", expected, actual));
    },
    
    "expect_true" = fn(expr, message) {
      arch.assert(expr != false, message || create_simple_message("IS_TRUE"));
    },
    
    "expect_false" = fn(expr, message) {
      arch.assert(expr != true, message || create_simple_message("IS_FALSE"));
    },
    
    "fail" = fn(message) {
      io.println("test failed: " + message);
      terminate();
    },
    
    "test" = fn(name, test) {
      ret {
        "name" = name, 
        "test" = test
      };
    },
    
    "exec" = fn(test) {
      if (!test || type(test) != "table") {
        io.println("cannot 'begin' " + ?test + ": the value provided is invalid.");
        terminate();
      }
      
      if(!("test" in test)) {
        io.println("there is no method called 'test' to invoke.");
        terminate();
      }
      
      if (!("name" in test)) {
        io.println("a test needs a name. define one.");
        terminate();
      }

      io.println("TEST [" + @test.name + "]");
      test.test();
      io.println("TEST PASSED.\n");
    }
  };
  
  arch = arch_def;
}

register_arch();
undef register_arch;