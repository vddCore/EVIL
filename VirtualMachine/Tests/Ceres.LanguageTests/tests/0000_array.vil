#[test(10)]
fn arr_size() -> #array(10);

#[test(21.37)]
fn arr_set_val() {
  val arr = array(2);
  arr[0] = 10;
  arr[1] = 21.37;
  
  ret arr[1];
}

#[test(21.37)]
fn arr_init_val() {
  val arr = array() { 21.37, 11.11 };
  ret arr[0];
}

#[test]
fn arr_each() {
  rw val keys_in_order = true;
  rw val values_in_order = true;
  
  val arr = array() { 2, 4, 6, 8, 10 };
  
  rw val prev_i = 0;
  rw val prev_v = arr[prev_i];
  
  each (rw val i, v : arr) {
    if (i == 0) skip;
    if (!keys_in_order || !values_in_order) -> false;
    
    keys_in_order &= prev_i + 1 == i;
    values_in_order &= prev_v + 2 == v;
    
    prev_i = i;
    prev_v = v;
  }
  
  ret keys_in_order
   && values_in_order;
}

#[test]
fn arr_for() {
  rw val values_in_order = true;
  
  val arr = array() { 4, 8, 12, 16 };
  for (rw val i = 0; i < #arr; i++) {
    values_in_order &= (arr[i] == 4 * (i + 1));
  }
  
  ret values_in_order;
}

#[test(21.37)]
fn func_in_arr() {
  rw val result = 0;
  val arr = array() { fn() -> 21.37 };
  
  result = arr[0]();  
  ret result;
}