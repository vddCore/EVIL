#[test]
fn table_empty() {
  val a = {};
  
  assert.is_of_type(a, Table);
  assert.equal(#a, 0);
}

#[test]
fn table_value_init() {
  val a = { 1, 2, 3, 4, 5 };
  
  assert.is_of_type(a, Table);
  assert.equal(#a, 5);
  
  assert.equal(a[0], 1);
  assert.equal(a[1], 2);
  assert.equal(a[2], 3);
  assert.equal(a[3], 4);
  assert.equal(a[4], 5);
}

#[test]
fn table_constkeyed_init() {
  val a = {
    "key_a" => 123,
    "key_b" => 234,
    2137 => { "jp", 2, "gmd"}
  };
  
  assert.is_of_type(a, Table);
  assert.equal(#a, 3);
  assert.is_true("key_a" in a);
  assert.is_true("key_b" in a);
  assert.is_true(2137 in a);  
  assert.equal(a.key_a, 123);
  assert.equal(a.key_b, 234);

  val inner_table = a[2137];
  assert.is_of_type(inner_table, Table);
  assert.equal(#inner_table, 3);
  assert.is_true(0 in inner_table);
  assert.is_true(1 in inner_table);
  assert.is_true(2 in inner_table);
  assert.equal(inner_table[0], "jp");
  assert.equal(inner_table[1], 2);
  assert.equal(inner_table[2], "gmd");
}

#[test]
fn table_identkeyed() {
  val vec = { x: 21.37, y: 42.74 };
  
  assert.is_of_type(vec, Table);
  assert.equal(#vec, 2);
  
  assert.is_true("x" in vec);
  assert.is_true("y" in vec);
  
  assert.equal(vec.x, 21.37);
  assert.equal(vec.y, 42.74);
}

#[test]
fn table_computedkey_init() {
  val a = {
    [2 + 1.37] => "jp2gmd",
    [21 + $"37"] => "można, jak najbardziej",    
    [@21 + "37"] => "jeszcze jak",
    [21 + 0.37] => "dla ciebie liczba pierwsza dla niego ostatnia"
  };
  
  assert.is_of_type(a, Table);
  assert.equal(#a, 4);
  
  val k1 = 2 + 1.37,
      k2 = 21 + $"37",
      k3 = @21 + "37",
      k4 = 21 + 0.37;
      
  assert.is_true(k1 in a);
  assert.is_true(k2 in a);
  assert.is_true(k3 in a);
  assert.is_true(k4 in a);
  
  assert.equal(a[k1], "jp2gmd");
  assert.equal(a[k2], "można, jak najbardziej");
  assert.equal(a[k3], "jeszcze jak");
  assert.equal(a[k4], "dla ciebie liczba pierwsza dla niego ostatnia");
}

#[test]
fn table_mixed_keying() {
  val a = { 
    b: "haha funny",
    [213 + .7] => "blah",
    "c" => "yayy"
  };
  
  assert.is_of_type(a, Table);
  assert.equal(#a, 3);
  
  assert.is_true("b" in a);
  assert.is_true(213 + .7 in a);
  assert.is_true("c" in a);
  
  assert.equal(a.b, "haha funny");
  assert.equal(a[213 + .7], "blah");
  assert.equal(a.c, "yayy");
}

#[test]
fn nested_table_indexing() {
  val a = { 1, { 2, 3, { 4, 5, 6, { 7, 8, 9, 10, 21.37 } } } };
  
  assert.is_of_type(a, Table); 
  assert.equal(a[1][2][3][4], 21.37);
}

#[test]
fn nested_table_identifier_indexing() {
  val a = { b: { c: { d: { j: { p2gmd: 213.7 } } } } };
  
  assert.is_of_type(a, Table);
  assert.equal(a.b.c.d.j.p2gmd, 213.7);
}

#[test]
fn tables_are_references() {
  val t = { { 21.37 } };
  val t2 = { t[0] };
  
  t2[0][0] = "21.37";
  
  assert.equal(t[0][0], "21.37"); 
}

#[test] fn table_equality_is_by_reference() -> assert.is_true({ 0, 255, 0 } != { 0, 255, 0 });
#[test] fn table_is_deeply_equal_flat() -> assert.is_true({ 0, 255, 0 } <==> { 0, 255, 0 });
#[test] fn table_is_deeply_not_equal_flat() -> assert.is_true({ 0, 1, 2 } <!=> { 3, 4, 5 });
#[test] fn table_is_deeply_equal_nested() -> assert.is_true({ 0, 1, 2, { 3, 4, 5 }, 21.37 } <==> { 0, 1, 2, { 3, 4, 5 }, 21.37 });
#[test] fn table_is_deeply_not_equal_nested() -> assert.is_true({ 0, 1, 2, { 3, 4, 5 }, 21.37 } <!=> { 0, 1, 2, { 3, 4, 5 }, 213.7 });

#[test] 
fn table_tricky_works() {
  __tricky.d20 = 1337;
  
  assert.equal(__tricky.d20, nil);
  assert.equal(__tricky.d20, nil);
  assert.equal(__tricky.d20, nil);
  assert.is_of_type(__tricky.d20, Number);
  assert.not_equal(__tricky.d20, 1337);
  assert.is_false("d20" in __tricky);
}