var Sierpinski = {
  "haha" <- "test",
  "new" <- fn(n, f) {
    var that = this
    
    ret {
      "order" <- n,
      "func" <- f,
      "S" <- fn(x, y) {
        if (x == 0 || y == 0) { ret true }
        elif (x % 3 == 1 && y % 3 == 1) { ret false }

        ret this->S($(x/3), $(y/3))
      },
      "evaluate" <- fn() {
        io->println(that->haha)
        io->println("order = " + @this->order)

        for (var y = 0; y < math->pow(3, this->order-1); y++) {
          for (var x = 0; x < math->pow(3, this->order-1); x++) {
            io->print(
              this->func(
                this->S(x, y)
              )
            )
          }
          io->println()
        }
        io->println()
      }
    }
  }
}

fn main(args) {
  var order = 3

  if (#args) {
    order = str->s2n(args[0])
  }

  Sierpinski->new(
    order,
    fn(b) { 
      ret b && "##" || "  " 
    }
  )->evaluate()  
}